<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:task="http://www.springframework.org/schema/task" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.2.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-4.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--这个文件是对springMvc相关的配置-->

    <!-- 扫描路径  自动扫描@Controller -->
    <!-- 它背后注册了很多用于解析注解的处理器,其中就包括<context:annotation-config/>配置的注解所使用的处理器 -->
    <!-- 所以配置了<context:component-scan base-package="">之后,便无需再配置<context:annotation-config> -->
    <context:component-scan base-package="com.tent.cloud">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation"
                                expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <!-- 启用SpringMVC的注解功能,它会自动注册HandlerMapping、HandlerAdapter、ExceptionResolver的相关实例 -->
    <mvc:annotation-driven/>

    <!-- 自动扫描 标签 -->
    <context:component-scan base-package="com.tent.cloud.*.*.tag;com.tent.cloud.*.tag" />
    <bean name="api" class="com.tent.cloud.core.tags.APITemplateModel"></bean>
    <bean name="springContextUtil" class="com.tent.cloud.common.util.SpringContextUtil" scope="singleton"></bean>

    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter" />
            </list>
        </property>
    </bean>

    <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name = "supportedMediaTypes">
            <list>
                <bean class="org.springframework.http.MediaType">
                    <constructor-arg index="0" value="text"/>
                    <constructor-arg index="1" value="plain"/>
                    <constructor-arg index="2" value="UTF-8"/>
                </bean>
                <bean class="org.springframework.http.MediaType">
                    <constructor-arg index="0" value="*"/>
                    <constructor-arg index="1" value="*"/>
                    <constructor-arg index="2" value="UTF-8"/>
                </bean>
                <bean class="org.springframework.http.MediaType">
                    <constructor-arg index="0" value="text"/>
                    <constructor-arg index="1" value="*"/>
                    <constructor-arg index="2" value="UTF-8"/>
                </bean>
                <bean class="org.springframework.http.MediaType">
                    <constructor-arg index="0" value="application"/>
                    <constructor-arg index="1" value="json"/>
                    <constructor-arg index="2" value="UTF-8"/>
                </bean>
            </list>
        </property>
    </bean>

    <!-- 容器默认的DefaultServletHandler处理 所有静态内容与无RequestMapping处理的URL -->
    <mvc:default-servlet-handler/>

    <!-- 定义无需Controller的url<->view直接映射 -->
    <mvc:view-controller path="/" view-name="redirect:index.html"/>

    <!-- 视图层配置 -->
    <!-- 配置SpringMVC的视图解析器 -->
    <!-- 其viewClass属性的默认值就是org.springframework.web.servlet.view.JstlView -->
    <!--===============通用视图解析器 begin===============-->
    <bean id="viewResolverCommon"
          class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/" />
        <property name="suffix" value=".jsp" />
        <!--			可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑-->
        <property name="viewClass" value="org.springframework.web.servlet.view.InternalResourceView"></property>
        <property name="order" value="1" />
    </bean>

    <!-- 视图解析器 -->
    <!-- 配置freeMarker视图解析器 -->
    <bean id="viewResolverFtl"
          class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="viewClass" value="com.tent.cloud.core.freemarker.extend.FreeMarkerViewExtend" />
        <!-- 把Freemarker 扩展一下，把相关属性加入进去。。。 -->
        <property name="contentType" value="text/html; charset=utf-8" />
        <property name="cache" value="true" />
        <property name="suffix" value=".ftl" />
        <property name="order" value="0" />
    </bean>
    <bean id="viewResolver"
          class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="order" value="2"></property>
        <property name="viewClass"
                  value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".jsp"></property>
    </bean>

    <!-- 配置freeMarker 拓展-->
    <bean id="freemarkerConfig"
          class="com.tent.cloud.core.freemarker.extend.FreeMarkerConfigExtend">
        <property name="templateLoaderPath">
            <value>/ftl/</value>
        </property>
        <property name="freemarkerVariables">
            <map>
                <entry key="xml_escape" value-ref="fmXmlEscape" />
                <entry key="api" value-ref="api"/>
            </map>
        </property>
        <property name="defaultEncoding">
            <value>utf-8</value>
        </property>
        <property name="freemarkerSettings">
            <props><!-- 315360000 -->
                <prop key="template_update_delay">0</prop>
                <prop key="defaultEncoding">UTF-8</prop>
                <prop key="url_escaping_charset">UTF-8</prop>
                <prop key="locale">zh_CN</prop>
                <prop key="boolean_format">true,false</prop>
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
                <prop key="date_format">yyyy-MM-dd</prop>
                <prop key="time_format">HH:mm:ss</prop>
                <!--			<prop key="number_format">0.######</prop>-->
                <prop key="number_format">#</prop>
                <prop key="whitespace_stripping">true</prop>
                <prop key="auto_import">
                    <!-- 自动装载，引入Freemarker，用于Freemarker Macro引入 -->
                    /common/config/top.ftl as _top,
                    /common/config/left.ftl as _left
                </prop>
            </props>
        </property>
    </bean>
    <bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape"/>
    <!--===============通用视图解析器 end===============-->

    <!-- SpringMVC在超出上传文件限制时，会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->
    <!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->
    <bean class="com.tent.common.spring.FrogMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到/WEB-INF/error/error_fileupload.jsp页面 -->
                <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">/WEB-INF/error/error_fileupload</prop>

                <prop key="org.apache.shiro.authz.AuthorizationException">/WEB-INF/error/auth</prop>
                <!-- 处理其它异常(包括Controller抛出的) -->
                <prop key="java.lang.Throwable">/WEB-INF/error/500</prop>
            </props>
        </property>
    </bean>

    <!--  上传文件定义大小 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
          p:defaultEncoding="utf-8">
        <property name="maxUploadSize" value="50048000" />
    </bean>

    <!--shiro 授权 start  解决不走shiro授权方法及shiro注解问题-->
    <!-- 开启aop，对类代理 -->
    <aop:config proxy-target-class="false"></aop:config>
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- 开启shiro注解支持 -->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager" />
    </bean>
    <!--shiro 授权 end-->

    <!-- 拦截器 -->
    <!--<mvc:interceptors>-->
        <!--<mvc:interceptor>-->
            <!--<mvc:mapping path="/**/*.html"/>-->
            <!--<bean class="*"></bean>&lt;!&ndash;class="baoming"&ndash;&gt;-->
        <!--</mvc:interceptor>-->
    <!--</mvc:interceptors>-->
    
    <!-- 静态资源配置 -->
    <!--<mvc:resources location="/css/" mapping="/css/**"></mvc:resources>-->
    <!--<mvc:resources location="/images/" mapping="/images/**"></mvc:resources>-->
    <!--<mvc:resources location="/fonts/" mapping="/fonts/**"></mvc:resources>-->
    <!--<mvc:resources location="/js/" mapping="/js/**"></mvc:resources>-->
    <!--<mvc:resources location="/static/" mapping="/static/**"></mvc:resources>-->

</beans>