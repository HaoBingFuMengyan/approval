<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!-- 所有javaweb项目第一步要做的就是对web.xml文件进行配置。-->
<!--
  - This is the Cocoon web-app configurations file
  -
  - $Id$
  -->
<web-app version="2.4"
         xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

  <description>项目描述标签</description><!-- 对项目进行描述 -->
  <display-name>master</display-name><!-- 定义项目的名称 -->

  <!--默认欢迎页面-->
  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>

  <!-- 防止发生java.beans.Introspector内存泄露,应将它配置在ContextLoaderListener的前面 -->
  <listener>
    <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
  </listener>

  <!--负责启动spring容器的监听器 begin-->
  <!-- 实例化Spring容器 -->
  <!-- 应用启动时,该监听器被执行,它会读取Spring相关配置文件,其默认会到WEB-INF中查找applicationContext.xml -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!-- 从类路径下加载spring的配置文件,classpath关键字特指类路径下加载  应用程序上下文 -->
  <context-param><!-- 含有一对参数名和参数值，用作应用servlet上下文初始化参数。参数名在整个web应用中必须是唯一的。 -->
    <param-name>contextConfigLocation</param-name><!-- 设置参数名称 -->
    <param-value>classpath*:/spring.xml</param-value><!-- 设置参数值 -->
    <!--<param-value>WEB-INF/applicationContext-shiro.xml</param-value>&lt;!&ndash; 设置参数值 &ndash;&gt;-->
  </context-param>

  <context-param>
    <param-name>spring.profiles.active</param-name>
    <param-value>dev</param-value>
  </context-param>
  <context-param><!-- 指定使用那个配置文件 -->
    <param-name>spring.profiles.default</param-name>
    <param-value>dev</param-value>
  </context-param>

  <!-- 统一编码 编码过滤器解决请求乱码问题(只能解决post请求乱码，get请求乱码需要在tomact的server.xml中修改)
      get乱码修改<Connector connectionTimeout="20000" port="8080" protocol="HTTP/1.1" redirectPort="8443" URIEncoding="UTF-8"/>
  -->
  <filter>
    <filter-name>SpringEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <!--Filter-mapping中的url-pattern为过滤的url类型-->
  <filter-mapping>
    <filter-name>SpringEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>


  <!-- 配置Shiro过滤器,先让Shiro过滤系统接收到的请求 -->
  <!-- 这里filter-name必须对应applicationContext.xml中定义的<bean id="shiroFilter"/> -->
  <!-- 使用[/*]匹配所有请求,保证所有的可控请求都经过Shiro的过滤 -->
  <!-- 通常会将此filter-mapping放置到最前面(即其他filter-mapping前面),以保证它是过滤器链中第一个起作用的 -->
  <filter>
    <filter-name>shiroFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    <init-param>
      <!-- 该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由ServletContainer管理 -->
      <param-name>targetFilterLifecycle</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>shiroFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>


  <!--&lt;!&ndash; URL space mappings ============================================= &ndash;&gt;-->

  <!--
   - Cocoon handles all the URL space assigned to the webapp using its sitemap.
   - It is recommended to leave it unchanged. Under some circumstances though
   - (like integration with proprietary webapps or servlets) you might have
   - to change tsyseter.
  -->
  <!-- 声明springMVC 的 DispatcherServlet web应用程序上下文 前端控制器-->
  <servlet>
    <servlet-name>springmvc</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!-- 加载/WEB-INF/[servlet-name]-servlet.xml -->
    <!--必须是个整数，表示servlet应该被载入的顺序；
            当值为0或者大于0时，表示容器在应用启动时就加载并初始化这个servlet；
            当值小于0或者没有指定时，则表示容器在该servlet被选择时才会去加载；
            正数的值越小，该servlet的优先级越高，应用启动时就越先加载；
            当值相同时，容器就会自己选择顺序来加载
        -->
    <init-param>
      <description>spring mvc 配置文件</description>
      <param-name>contextConfigLocation</param-name>
      <param-value>/WEB-INF/spring-mvc-master.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
    <!--<load-on-startup>2</load-on-startup>-->
  </servlet>
  <!--拦截器配置-->
  <servlet-mapping>
    <servlet-name>springmvc</servlet-name><!-- 定义servlet所对应的名称 -->
    <url-pattern>/</url-pattern><!-- 定义servlet所对应的url路径 -->
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>springmvc</servlet-name>
    <url-pattern>*.html</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>springmvc</servlet-name>
    <url-pattern>*.shtml</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>springmvc</servlet-name>
    <url-pattern>*.json</url-pattern>
  </servlet-mapping>

  <!-- 设置Session的超时时间(零或负数表示会话永不超时)-->
  <session-config>
    <session-timeout>600</session-timeout>
  </session-config>


  <error-page>
    <exception-type>java.lang.Throwable</exception-type>
    <location>/WEB-INF/error/500.jsp</location>
  </error-page>
  <error-page>
    <error-code>500</error-code>
    <location>/WEB-INF/error/500.jsp</location>
  </error-page>
  <error-page>
    <error-code>404</error-code>
    <location>/WEB-INF/error/404.jsp</location>
  </error-page>

</web-app>
